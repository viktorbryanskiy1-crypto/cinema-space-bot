from flask import Flask, render_template, request, jsonify, redirect, url_for, session, send_from_directory, flash
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import os
import threading
import json
from database import *
from werkzeug.utils import secure_filename
import uuid

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
TOKEN = os.environ.get('TELEGRAM_TOKEN')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL', 'https://cinema-space-bot.onrender.com')

app = Flask(__name__)
# –ó–∞–¥–∞–π —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –≤ production —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
app.secret_key = os.environ.get('FLASK_SECRET', 'change-me-to-random-secret')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–æ–∫
app.config['MAX_CONTENT_LENGTH'] = 50 * 1024 * 1024  # 50MB
app.config['UPLOAD_FOLDER'] = 'uploads'
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
ALLOWED_VIDEO_EXTENSIONS = {'mp4', 'avi', 'mov', 'wmv', 'flv', 'webm'}
ALLOWED_IMAGE_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'webp'}

def allowed_file(filename, allowed_extensions):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in allowed_extensions

# --- TELEGRAM BOT (–µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å TOKEN) ---
updater = None
if TOKEN:
    try:
        updater = Updater(TOKEN, use_context=True)
        dp = updater.dispatcher
    except Exception as e:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram Updater:", e)
        updater = None

def start(update, context):
    user = update.message.from_user
    telegram_id = str(user.id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    try:
        get_or_create_user(
            telegram_id=telegram_id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ get_or_create_user:", e)

    keyboard = [[
        InlineKeyboardButton("üåå –ö–∏–Ω–æ–í—Å–µ–ª–µ–Ω–Ω–∞—è", web_app=WebAppInfo(url=WEBHOOK_URL))
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∏–Ω–æ–í—Å–µ–ª–µ–Ω–Ω–∞—è!\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        reply_markup=reply_markup
    )

def add_video_command(update, context):
    user = update.message.from_user
    telegram_id = str(user.id)
    user_role = get_user_role(telegram_id)
    if user_role not in ['owner', 'admin']:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ!")
        return
    update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç /add_video ... (—Å–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é)")

def add_video_handler(update, context):
    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π /add_video (–∫–∞–∫ –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ)
    user = update.message.from_user
    telegram_id = str(user.id)
    user_role = get_user_role(telegram_id)
    if user_role not in ['owner', 'admin']:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ!")
        return
    text = update.message.text or ""
    if not text.startswith('/add_video '):
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_video [—Ç–∏–ø] [–Ω–∞–∑–≤–∞–Ω–∏–µ]")
        return
    lines = text.split('\n')
    if len(lines) < 2:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
        return
    command_line = lines[0]
    video_url = lines[1].strip()
    parts = command_line.split(' ', 3)
    if len(parts) < 3:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_video [—Ç–∏–ø] [–Ω–∞–∑–≤–∞–Ω–∏–µ]")
        return
    content_type = parts[1]
    title = ' '.join(parts[2:])
    if content_type not in ['moment', 'trailer', 'news']:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞! –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: moment, trailer, news")
        return
    try:
        if content_type == 'moment':
            add_moment(title, "–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram", video_url)
        elif content_type == 'trailer':
            add_trailer(title, "–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram", video_url)
        elif content_type == 'news':
            add_news(title, "–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram", video_url)
        update.message.reply_text(f"‚úÖ {content_type} '{title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã, –µ—Å–ª–∏ –±–æ—Ç –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
if updater:
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("add_video", add_video_command))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'^/add_video '), add_video_handler))

# --- Flask –º–∞—Ä—à—Ä—É—Ç—ã (–≤–∫–ª–∞–¥–∫–∏ UI) ---
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/moments')
def moments():
    moments_data = get_all_moments()
    moments_with_reactions = []
    for m in moments_data:
        reactions = get_reactions_count('moment', m[0])
        comments_count = len(get_comments('moment', m[0]))
        moments_with_reactions.append({
            'id': m[0],
            'title': m[1],
            'description': m[2],
            'video_url': m[3],
            'created_at': m[4],
            'reactions': reactions,
            'comments_count': comments_count
        })
    return render_template('moments.html', moments=moments_with_reactions)

@app.route('/trailers')
def trailers():
    trailers_data = get_all_trailers()
    trailers_with_reactions = []
    for t in trailers_data:
        reactions = get_reactions_count('trailer', t[0])
        comments_count = len(get_comments('trailer', t[0]))
        trailers_with_reactions.append({
            'id': t[0],
            'title': t[1],
            'description': t[2],
            'video_url': t[3],
            'created_at': t[4],
            'reactions': reactions,
            'comments_count': comments_count
        })
    return render_template('trailers.html', trailers=trailers_with_reactions)

@app.route('/news')
def news():
    news_data = get_all_news()
    news_with_reactions = []
    for n in news_data:
        reactions = get_reactions_count('news', n[0])
        comments_count = len(get_comments('news', n[0]))
        news_with_reactions.append({
            'id': n[0],
            'title': n[1],
            'text': n[2],
            'image_url': n[3],
            'created_at': n[4],
            'reactions': reactions,
            'comments_count': comments_count
        })
    return render_template('news.html', news=news_with_reactions)

@app.route('/search')
def search():
    query = request.args.get('q', '')
    # –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ ‚Äî –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
    return render_template('search.html', query=query, results=[])

# --- API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ñ–æ—Ä–º–∞–º–∏/–∑–∞–≥—Ä—É–∑–∫–∞–º–∏) ---
@app.route('/api/add_moment', methods=['POST'])
def api_add_moment():
    try:
        video_url = ''
        if 'video_file' in request.files:
            file = request.files['video_file']
            if file and file.filename != '' and allowed_file(file.filename, ALLOWED_VIDEO_EXTENSIONS):
                filename = secure_filename(file.filename)
                unique_filename = str(uuid.uuid4()) + '_' + filename
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
                file.save(filepath)
                video_url = f"/uploads/{unique_filename}"
        else:
            data = request.get_json(silent=True) or {}
            video_url = data.get('video_url', '')

        data = request.form if request.form else (request.get_json(silent=True) or {})
        add_moment(data.get('title', ''), data.get('description', ''), video_url)
        return jsonify({"success": True})
    except Exception as e:
        return jsonify({"success": False, "error": str(e)})

@app.route('/api/add_trailer', methods=['POST'])
def api_add_trailer():
    try:
        video_url = ''
        if 'video_file' in request.files:
            file = request.files['video_file']
            if file and file.filename != '' and allowed_file(file.filename, ALLOWED_VIDEO_EXTENSIONS):
                filename = secure_filename(file.filename)
                unique_filename = str(uuid.uuid4()) + '_' + filename
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
                file.save(filepath)
                video_url = f"/uploads/{unique_filename}"
        else:
            data = request.get_json(silent=True) or {}
            video_url = data.get('video_url', '')

        data = request.form if request.form else (request.get_json(silent=True) or {})
        add_trailer(data.get('title', ''), data.get('description', ''), video_url)
        return jsonify({"success": True})
    except Exception as e:
        return jsonify({"success": False, "error": str(e)})

@app.route('/api/add_news', methods=['POST'])
def api_add_news():
    try:
        title = request.form.get('title', '')
        text = request.form.get('text', '')
        image_url = ''
        if 'image_file' in request.files:
            file = request.files['image_file']
            if file and file.filename != '' and allowed_file(file.filename, ALLOWED_IMAGE_EXTENSIONS):
                filename = secure_filename(file.filename)
                unique_filename = str(uuid.uuid4()) + '_' + filename
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
                file.save(filepath)
                image_url = f"/uploads/{unique_filename}"
        if not image_url and 'image_url' in request.form:
            image_url = request.form['image_url']
        add_news(title, text, image_url)
        return jsonify({"success": True})
    except Exception as e:
        return jsonify({"success": False, "error": str(e)})

# –æ—Ç–¥–∞—á–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
@app.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

# --- reactions / comments API ---
@app.route('/api/reaction', methods=['POST'])
def api_add_reaction():
    data = request.json or {}
    success = add_reaction(
        data.get('item_type'),
        data.get('item_id'),
        data.get('user_id', 'anonymous'),
        data.get('reaction')
    )
    return jsonify({"success": success})

@app.route('/api/comments', methods=['GET'])
def api_get_comments():
    item_type = request.args.get('type')
    item_id = request.args.get('id')
    comments = get_comments(item_type, int(item_id))
    return jsonify({"comments": comments})

@app.route('/api/comment', methods=['POST'])
def api_add_comment():
    data = request.json or {}
    add_comment(
        data.get('item_type'),
        data.get('item_id'),
        data.get('user_name', '–ì–æ—Å—Ç—å'),
        data.get('text', '')
    )
    return jsonify({"success": True})

# --- Admin auth + admin pages ---
@app.route('/admin/login', methods=['GET', 'POST'])
def admin_login():
    if request.method == 'POST':
        username = request.form.get('username', '')
        password = request.form.get('password', '')
        if authenticate_admin(username, password):
            session['admin'] = username
            flash('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥', 'success')
            return redirect(url_for('admin_dashboard'))
        else:
            return render_template('admin/login.html', error='–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
    return render_template('admin/login.html')

@app.route('/admin/logout')
def admin_logout():
    session.pop('admin', None)
    return redirect(url_for('admin_login'))

@app.route('/admin')
def admin_dashboard():
    if 'admin' not in session:
        return redirect(url_for('admin_login'))
    stats = get_stats()
    return render_template('admin/dashboard.html',
                           moments_count=stats['moments'],
                           trailers_count=stats['trailers'],
                           news_count=stats['news'],
                           comments_count=stats['comments'])

@app.route('/admin/content')
def admin_content():
    if 'admin' not in session:
        return redirect(url_for('admin_login'))
    moments = get_all_moments()
    trailers = get_all_trailers()
    news = get_all_news()
    return render_template('admin/content.html', moments=moments, trailers=trailers, news=news)

@app.route('/admin/delete/<content_type>/<int:content_id>')
def admin_delete(content_type, content_id):
    if 'admin' not in session:
        return redirect(url_for('admin_login'))
    if content_type == 'moment':
        delete_moment(content_id)
    elif content_type == 'trailer':
        delete_trailer(content_id)
    elif content_type == 'news':
        delete_news(content_id)
    return redirect(url_for('admin_content'))

# --- Access settings (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ) ---
@app.route('/admin/access')
def admin_access_settings():
    if 'admin' not in session:
        return redirect(url_for('admin_login'))
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –∏–∑ –±–∞–∑—ã –∏ –ø–µ—Ä–µ–¥–∞—ë–º –≤ —à–∞–±–ª–æ–Ω
    moment_roles = get_access_settings('moment')
    trailer_roles = get_access_settings('trailer')
    news_roles = get_access_settings('news')
    return render_template('admin/access/settings.html',
                           moment_roles=moment_roles,
                           trailer_roles=trailer_roles,
                           news_roles=news_roles)

@app.route('/admin/access/update/<content_type>', methods=['POST'])
def admin_update_access(content_type):
    if 'admin' not in session:
        return redirect(url_for('admin_login'))
    roles = request.form.getlist('roles')  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ getlist –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    print(f"!!! ADMIN_UPDATE_ACCESS called for {content_type}, roles={roles}")
    success = update_access_settings(content_type, roles)
    if success:
        flash('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success')
    else:
        flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error')
    return redirect(url_for('admin_access_settings'))

# --- Telegram webhook starter (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
def start_bot():
    if not updater:
        print("Telegram token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚Äî –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
        return
    try:
        WEBHOOK_URL_FULL = f"{WEBHOOK_URL}/{TOKEN}"
        updater.bot.set_webhook(url=WEBHOOK_URL_FULL)
        print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", WEBHOOK_URL_FULL)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å polling):", e)
    updater.start_polling()

@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    if not updater:
        return 'no token'
    update = Update.de_json(request.get_json(force=True), updater.bot)
    updater.dispatcher.process_update(update)
    return 'ok'

# --- Run ---
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω)
    if updater:
        bot_thread = threading.Thread(target=start_bot, daemon=True)
        bot_thread.start()
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=True)
