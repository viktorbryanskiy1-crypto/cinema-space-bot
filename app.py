# app.py
import os
import io
import threading
import logging
import uuid
import mimetypes
from datetime import datetime
from urllib.parse import urlparse
from flask import (
    Flask, render_template, request, jsonify,
    redirect, url_for, session, send_from_directory, abort
)
from werkzeug.utils import secure_filename
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
import psycopg2
import requests

# ====== –ò–º–ø–æ—Ä—Ç –∏–∑ –≤–∞—à–µ–≥–æ database.py ======
# –í database.py –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å PostgreSQL (–∞ –Ω–µ SQLite).
# –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∫–∞–∫ "–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É" —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞/—Ä–µ–∞–∫—Ü–∏–π/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤/—Ä–æ–ª–µ–π.
from database import (
    get_or_create_user, get_user_role,
    add_moment, add_trailer, add_news,
    get_all_moments, get_all_trailers, get_all_news,
    get_reactions_count, get_comments,
    add_reaction, add_comment,
    authenticate_admin, get_stats,
    delete_moment, delete_trailer, delete_news,
    get_access_settings, update_access_settings,
    init_db
)

# ====== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ======
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("cinema-space")

# ====== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ======
TOKEN = os.environ.get('TELEGRAM_TOKEN')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL', 'https://cinema-space-bot.onrender.com').strip()
if not TOKEN:
    logger.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    raise SystemExit(1)

DB_HOST = os.environ.get('DB_HOST', 'localhost')
DB_NAME = os.environ.get('DB_NAME', 'cinema')
DB_USER = os.environ.get('DB_USER', 'postgres')
DB_PASS = os.environ.get('DB_PASS', 'postgres')

# ====== Flask ======
app = Flask(__name__)
app.secret_key = os.environ.get('FLASK_SECRET_KEY', 'super-secret-key-change-me-please')

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
app.config['MAX_CONTENT_LENGTH'] = 50 * 1024 * 1024  # 50MB
app.config['UPLOAD_FOLDER'] = 'uploads'
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

ALLOWED_VIDEO_EXTENSIONS = {'mp4', 'avi', 'mov', 'wmv', 'flv', 'webm'}
ALLOWED_IMAGE_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'webp'}

def allowed_file(filename: str, allowed_extensions: set) -> bool:
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in allowed_extensions

# ====== Telegram Bot ======
updater = Updater(TOKEN, use_context=True)
dp = updater.dispatcher

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤ Telegram (–¥–≤—É—Ö—Å–æ—Å—Ç–æ—è–Ω–∏–µ)
def ensure_tg_state_table():
    try:
        conn = psycopg2.connect(host=DB_HOST, database=DB_NAME, user=DB_USER, password=DB_PASS)
        cur = conn.cursor()
        cur.execute("""
            CREATE TABLE IF NOT EXISTS telegram_users (
                telegram_id BIGINT PRIMARY KEY,
                started BOOLEAN DEFAULT FALSE
            );
        """)
        conn.commit()
        cur.close()
        conn.close()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É telegram_users: {e}")

ensure_tg_state_table()

# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ "—É–º–Ω–æ–≥–æ" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ URL ======
def _unique_basename(filename: str) -> str:
    safe = secure_filename(filename) if filename else 'file'
    return f"{uuid.uuid4()}_{safe}"

def _guess_ext_from_mime(content_type: str, fallback: str = '') -> str:
    if not content_type:
        return fallback
    ext = mimetypes.guess_extension(content_type.split(';')[0].strip())
    if ext:
        return ext.lstrip('.')
    return fallback

def save_uploaded_file(file_storage, allowed_exts) -> str | None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ /uploads –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç web-–ø—É—Ç—å '/uploads/<name>'.
    """
    if file_storage and allowed_file(file_storage.filename, allowed_exts):
        filename = _unique_basename(file_storage.filename)
        path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file_storage.save(path)
        return f"/uploads/{filename}"
    return None

STREAMABLE_HOSTS = ("youtube.com", "youtu.be", "vimeo.com", "t.me", "telegram.me", "telegram.org")

def _should_download_to_server(url: str) -> bool:
    """
    –†–µ—à–∞–µ–º, –∏–º–µ–µ—Ç –ª–∏ —Å–º—ã—Å–ª —Å–∫–∞—á–∏–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä:
    - –ù–ï —Å–∫–∞—á–∏–≤–∞–µ–º YouTube/Vimeo/Telegram (–∏—Ö –Ω–∞–¥–æ –≤—Å—Ç—Ä–∞–∏–≤–∞—Ç—å)
    - –°–∫–∞—á–∏–≤–∞–µ–º –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ (CDN, —Ñ–∞–π–ª–æ–≤—ã–µ —Ö–æ—Å—Ç–∏–Ω–≥–∏), –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Ä–∞–∑—É–º–Ω—ã–π
    """
    try:
        netloc = urlparse(url).netloc.lower()
        return url.lower().startswith("http") and not any(h in netloc for h in STREAMABLE_HOSTS)
    except Exception:
        return False

def _stream_download_to(path: str, response, max_bytes: int = 50 * 1024 * 1024):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ –≤ —Ñ–∞–π–ª —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞.
    """
    total = 0
    with open(path, "wb") as f:
        for chunk in response.iter_content(chunk_size=1024 * 128):
            if not chunk:
                continue
            total += len(chunk)
            if total > max_bytes:
                raise ValueError("–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç 50MB")
            f.write(chunk)

def download_and_store(url: str, allowed_exts: set, prefer_ext: str = '') -> str | None:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ –ø—Ä—è–º–æ–º—É URL –∏ –∫–ª–∞–¥—ë—Ç –≤ /uploads, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç web-–ø—É—Ç—å.
    –î–ª—è –≤–∏–¥–µ–æ/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ content-type/URL.
    """
    try:
        with requests.get(url, stream=True, timeout=12) as r:
            r.raise_for_status()
            # –í—ã—è—Å–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            content_type = r.headers.get("Content-Type", "")
            guess_ext = _guess_ext_from_mime(content_type, fallback=prefer_ext)
            # –µ—Å–ª–∏ –≤ URL –µ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ –æ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            url_path = urlparse(url).path
            url_ext = os.path.splitext(url_path)[1].lstrip('.').lower()
            ext = url_ext if url_ext in allowed_exts else (guess_ext if guess_ext in allowed_exts else '')
            if not ext:
                # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ ‚Äî –ø—Ä–æ–±—É–µ–º mp4/png –ø–æ —Ç–∏–ø—É
                if 'video' in content_type:
                    ext = 'mp4' if 'mp4' in ALLOWED_VIDEO_EXTENSIONS else list(ALLOWED_VIDEO_EXTENSIONS)[0]
                elif 'image' in content_type:
                    ext = 'png' if 'png' in ALLOWED_IMAGE_EXTENSIONS else list(ALLOWED_IMAGE_EXTENSIONS)[0]
                else:
                    # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø ‚Äî –ª—É—á—à–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è
                    raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ URL")

            filename = _unique_basename(f"remote.{ext}")
            path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            _stream_download_to(path, r, max_bytes=50 * 1024 * 1024)
            return f"/uploads/{filename}"
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –ø–æ URL {url}: {e}")
        return None

# ====== –î–≤—É—Ö—Å–æ—Å—Ç–æ—è–Ω–∏–µ /start ======
def start(update, context):
    try:
        user = update.message.from_user
        telegram_id = str(user.id)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∞—à–µ–π –ë–î (–∏–∑ database.py)
        get_or_create_user(
            telegram_id=telegram_id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "started" –≤ PostgreSQL
        started = True
        try:
            conn = psycopg2.connect(host=DB_HOST, database=DB_NAME, user=DB_USER, password=DB_PASS)
            cur = conn.cursor()
            cur.execute("SELECT started FROM telegram_users WHERE telegram_id=%s;", (telegram_id,))
            row = cur.fetchone()
            if row is None:
                cur.execute("INSERT INTO telegram_users (telegram_id, started) VALUES (%s, %s);", (telegram_id, False))
                conn.commit()
                started = False
            else:
                started = bool(row[0])
            cur.close()
            conn.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ /start: {e}")
            started = True  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è

        if not started:
            # –ü–µ—Ä–≤—ã–π —Ä–∞–∑: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å"
            keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="start_app")]]
        else:
            # –£–∂–µ –∑–∞–ø—É—Å–∫–∞–ª: —Å—Ä–∞–∑—É –¥–∞—ë–º WebApp-–∫–Ω–æ–ø–∫—É
            keyboard = [[InlineKeyboardButton("üåå –ö–∏–Ω–æ–í—Å–µ–ª–µ–Ω–Ω–∞—è", web_app=WebAppInfo(url=f"{WEBHOOK_URL}?mode=fullscreen"))]]

        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∏–Ω–æ–í—Å–µ–ª–µ–Ω–Ω—É—é!\n"
            "üé¨ –ú–æ–º–µ–Ω—Ç—ã | üé• –¢—Ä–µ–π–ª–µ—Ä—ã | üì∞ –ù–æ–≤–æ—Å—Ç–∏\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
        logger.info(f"/start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start: {e}")

def button_callback(update, context):
    query = update.callback_query
    telegram_id = query.from_user.id

    if query.data == "start_app":
        # –ú–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–∞—ë–º WebApp-–∫–Ω–æ–ø–∫—É
        keyboard = [[InlineKeyboardButton("üåå –ö–∏–Ω–æ–í—Å–µ–ª–µ–Ω–Ω–∞—è", web_app=WebAppInfo(url=f"{WEBHOOK_URL}?mode=fullscreen"))]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            query.edit_message_text("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=reply_markup)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏–º
            query.message.reply_text("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=reply_markup)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
        try:
            conn = psycopg2.connect(host=DB_HOST, database=DB_NAME, user=DB_USER, password=DB_PASS)
            cur = conn.cursor()
            cur.execute("UPDATE telegram_users SET started=TRUE WHERE telegram_id=%s;", (telegram_id,))
            conn.commit()
            cur.close()
            conn.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è started –¥–ª—è {telegram_id}: {e}")

# ====== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤/–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤) ======
pending_video_data = {}

def add_video_command(update, context):
    user = update.message.from_user
    telegram_id = str(user.id)
    user_role = get_user_role(telegram_id)
    if user_role not in ['owner', 'admin']:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ!")
        return

    text = update.message.text.strip()
    if not text.startswith('/add_video '):
        update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /add_video [moment|trailer|news] [–ù–∞–∑–≤–∞–Ω–∏–µ]")
        return

    parts = text.split(' ', 2)
    if len(parts) < 3:
        update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_video [—Ç–∏–ø] [–Ω–∞–∑–≤–∞–Ω–∏–µ]")
        return

    content_type = parts[1].lower()
    title = parts[2]
    if content_type not in ['moment', 'trailer', 'news']:
        update.message.reply_text("‚ùå –¢–∏–ø: moment | trailer | news")
        return

    pending_video_data[telegram_id] = {
        'content_type': content_type,
        'title': title
    }

    update.message.reply_text(
        f"üé¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {content_type} ¬´{title}¬ª.\n"
        f"–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (YouTube/Telegram/–ø—Ä—è–º–æ–π URL)."
    )

def handle_pending_video_url(update, context):
    user = update.message.from_user
    telegram_id = str(user.id)
    if telegram_id not in pending_video_data:
        return

    video_url = (update.message.text or '').strip()
    if not video_url:
        update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    data = pending_video_data.pop(telegram_id)
    content_type = data['content_type']
    title = data['title']

    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ (CDN/—Ñ–∞–π–ª), –ø–æ–ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –∏ —Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
    local_url = None
    if _should_download_to_server(video_url):
        local_url = download_and_store(video_url, ALLOWED_VIDEO_EXTENSIONS)

    final_url = local_url or video_url
    description = "–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram"

    try:
        if content_type == 'moment':
            add_moment(title, description, final_url)
        elif content_type == 'trailer':
            add_trailer(title, description, final_url)
        elif content_type == 'news':
            add_news(title, description, final_url)  # —Ç—É—Ç –≤–∏–¥–µ–æ_url —Ç—Ä–∞–∫—Ç—É–µ—Ç—Å—è –∫–∞–∫ —Å—Å—ã–ª–∫–∞ (—Ä–µ–¥–∫–æ –¥–ª—è news)
        update.message.reply_text(f"‚úÖ {content_type} ¬´{title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
dp.add_handler(CommandHandler('start', start))
dp.add_handler(CallbackQueryHandler(button_callback))
dp.add_handler(CommandHandler('add_video', add_video_command))
dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_pending_video_url))

# ====== Telegram webhook endpoint (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ polling) ======
@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), updater.bot)
    updater.dispatcher.process_update(update)
    return 'ok'

# ====== Flask –º–∞—Ä—à—Ä—É—Ç—ã ======
@app.route('/')
def index():
    # –í–∞—à index.html –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å Telegram.WebApp.expand() –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    return render_template('index.html')

@app.route('/moments')
def moments():
    items = get_all_moments()
    enriched = []
    for m in items:
        reactions = get_reactions_count('moment', m[0])
        comments_count = len(get_comments('moment', m[0]))
        enriched.append({
            'id': m[0],
            'title': m[1],
            'description': m[2],
            'video_url': m[3],
            'created_at': m[4],
            'reactions': reactions,
            'comments_count': comments_count
        })
    return render_template('moments.html', moments=enriched)

@app.route('/trailers')
def trailers():
    items = get_all_trailers()
    enriched = []
    for t in items:
        reactions = get_reactions_count('trailer', t[0])
        comments_count = len(get_comments('trailer', t[0]))
        enriched.append({
            'id': t[0],
            'title': t[1],
            'description': t[2],
            'video_url': t[3],
            'created_at': t[4],
            'reactions': reactions,
            'comments_count': comments_count
        })
    return render_template('trailers.html', trailers=enriched)

@app.route('/news')
def news():
    items = get_all_news()
    enriched = []
    for n in items:
        reactions = get_reactions_count('news', n[0])
        comments_count = len(get_comments('news', n[0]))
        enriched.append({
            'id': n[0],
            'title': n[1],
            'text': n[2],
            'image_url': n[3],
            'created_at': n[4],
            'reactions': reactions,
            'comments_count': comments_count
        })
    return render_template('news.html', news=enriched)

@app.route('/search')
def search():
    query = request.args.get('q', '')
    # TODO: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî —Ä–µ–∞–ª–∏–∑—É–π –ø–æ–∏—Å–∫ –≤ database.py
    results = []
    return render_template('search.html', query=query, results=results)

# ====== API: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ñ–∞–π–ª / URL + –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫) ======
@app.route('/api/add_moment', methods=['POST'])
def api_add_moment():
    try:
        # 1) –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        video_url = ''
        if 'video_file' in request.files and request.files['video_file'].filename:
            video_url = save_uploaded_file(request.files['video_file'], ALLOWED_VIDEO_EXTENSIONS) or ''

        # 2) –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî –±–µ—Ä–µ–º URL
        if not video_url:
            if request.is_json:
                video_url = (request.json or {}).get('video_url', '') or ''
                title = (request.json or {}).get('title', '') or ''
                description = (request.json or {}).get('description', '') or ''
            else:
                video_url = request.form.get('video_url', '') or ''
                title = request.form.get('title', '') or ''
                description = request.form.get('description', '') or ''
        else:
            # –§–∞–π–ª –µ—Å—Ç—å, –∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –º–æ–≥—É—Ç –ø—Ä–∏–π—Ç–∏ –≤ form-data
            title = request.form.get('title', '') if request.form else ''
            description = request.form.get('description', '') if request.form else ''

        # 3) –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –ø—Ä—è–º–æ–π URL (CDN) ‚Äî –ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        if not video_url.startswith('/uploads/') and _should_download_to_server(video_url):
            local = download_and_store(video_url, ALLOWED_VIDEO_EXTENSIONS)
            if local:
                video_url = local

        add_moment(title, description, video_url)
        return jsonify(success=True)
    except Exception as e:
        logger.exception("API add_moment error")
        return jsonify(success=False, error=str(e)), 400

@app.route('/api/add_trailer', methods=['POST'])
def api_add_trailer():
    try:
        video_url = ''
        if 'video_file' in request.files and request.files['video_file'].filename:
            video_url = save_uploaded_file(request.files['video_file'], ALLOWED_VIDEO_EXTENSIONS) or ''

        if not video_url:
            if request.is_json:
                video_url = (request.json or {}).get('video_url', '') or ''
                title = (request.json or {}).get('title', '') or ''
                description = (request.json or {}).get('description', '') or ''
            else:
                video_url = request.form.get('video_url', '') or ''
                title = request.form.get('title', '') or ''
                description = request.form.get('description', '') or ''
        else:
            title = request.form.get('title', '') if request.form else ''
            description = request.form.get('description', '') if request.form else ''

        if not video_url.startswith('/uploads/') and _should_download_to_server(video_url):
            local = download_and_store(video_url, ALLOWED_VIDEO_EXTENSIONS)
            if local:
                video_url = local

        add_trailer(title, description, video_url)
        return jsonify(success=True)
    except Exception as e:
        logger.exception("API add_trailer error")
        return jsonify(success=False, error=str(e)), 400

@app.route('/api/add_news', methods=['POST'])
def api_add_news():
    try:
        if request.is_json:
            title = (request.json or {}).get('title', '') or ''
            text = (request.json or {}).get('text', '') or ''
            image_url = (request.json or {}).get('image_url', '') or ''
        else:
            title = request.form.get('title', '') or ''
            text = request.form.get('text', '') or ''
            image_url = request.form.get('image_url', '') or ''

        # –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if 'image_file' in request.files and request.files['image_file'].filename:
            image_url = save_uploaded_file(request.files['image_file'], ALLOWED_IMAGE_EXTENSIONS) or image_url

        # –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –ø—Ä—è–º–æ–π URL (CDN) –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ ‚Äî –ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        if image_url and not image_url.startswith('/uploads/') and _should_download_to_server(image_url):
            local = download_and_store(image_url, ALLOWED_IMAGE_EXTENSIONS)
            if local:
                image_url = local

        add_news(title, text, image_url)
        return jsonify(success=True)
    except Exception as e:
        logger.exception("API add_news error")
        return jsonify(success=False, error=str(e)), 400

# ====== –û—Ç–¥–∞—á–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ======
@app.route('/uploads/<path:filename>')
def uploaded_file(filename):
    safe = secure_filename(filename)
    full_path = os.path.join(app.config['UPLOAD_FOLDER'], safe)
    if not os.path.isfile(full_path):
        abort(404)
    return send_from_directory(app.config['UPLOAD_FOLDER'], safe, as_attachment=False)

# ====== –†–µ–∞–∫—Ü–∏–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ======
@app.route('/api/reaction', methods=['POST'])
def api_add_reaction():
    try:
        data = request.get_json(force=True)
        success = add_reaction(
            data.get('item_type'),
            data.get('item_id'),
            data.get('user_id', 'anonymous'),
            data.get('reaction')
        )
        return jsonify(success=success)
    except Exception as e:
        logger.exception("API add_reaction error")
        return jsonify(success=False, error=str(e)), 400

@app.route('/api/comments', methods=['GET'])
def api_get_comments():
    try:
        item_type = request.args.get('type')
        item_id = int(request.args.get('id'))
        comments = get_comments(item_type, item_id)
        return jsonify(comments=comments)
    except Exception as e:
        logger.exception("API get_comments error")
        return jsonify(comments=[], error=str(e)), 400

@app.route('/api/comment', methods=['POST'])
def api_add_comment():
    try:
        data = request.get_json(force=True)
        add_comment(
            data.get('item_type'),
            data.get('item_id'),
            data.get('user_name', '–ì–æ—Å—Ç—å'),
            data.get('text')
        )
        return jsonify(success=True)
    except Exception as e:
        logger.exception("API add_comment error")
        return jsonify(success=False, error=str(e)), 400

# ====== –ê–¥–º–∏–Ω–∫–∞ ======
@app.route('/admin/login', methods=['GET', 'POST'])
def admin_login():
    if request.method == 'POST':
        username = request.form.get('username', '')
        password = request.form.get('password', '')
        if authenticate_admin(username, password):
            session['admin'] = username
            return redirect(url_for('admin_dashboard'))
        return render_template('admin/login.html', error='–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
    return render_template('admin/login.html')

@app.route('/admin/logout')
def admin_logout():
    session.pop('admin', None)
    return redirect(url_for('admin_login'))

def admin_required(func):
    from functools import wraps
    @wraps(func)
    def wrapper(*args, **kwargs):
        if 'admin' not in session:
            return redirect(url_for('admin_login'))
        return func(*args, **kwargs)
    return wrapper

@app.route('/admin')
@admin_required
def admin_dashboard():
    stats = get_stats()
    return render_template(
        'admin/dashboard.html',
        moments_count=stats.get('moments', 0),
        trailers_count=stats.get('trailers', 0),
        news_count=stats.get('news', 0),
        comments_count=stats.get('comments', 0)
    )

@app.route('/admin/content')
@admin_required
def admin_content():
    moments = get_all_moments()
    trailers = get_all_trailers()
    news = get_all_news()
    return render_template('admin/content.html', moments=moments, trailers=trailers, news=news)

@app.route('/admin/delete/<content_type>/<int:content_id>')
@admin_required
def admin_delete(content_type, content_id):
    if content_type == 'moment':
        delete_moment(content_id)
    elif content_type == 'trailer':
        delete_trailer(content_id)
    elif content_type == 'news':
        delete_news(content_id)
    return redirect(url_for('admin_content'))

@app.route('/admin/access')
@admin_required
def admin_access_settings():
    moment_roles = get_access_settings('moment')
    trailer_roles = get_access_settings('trailer')
    news_roles = get_access_settings('news')
    logger.debug(f"Access settings -> moments: {moment_roles}, trailers: {trailer_roles}, news: {news_roles}")
    return render_template(
        'admin/access/settings.html',
        moment_roles=moment_roles,
        trailer_roles=trailer_roles,
        news_roles=news_roles
    )

@app.route('/admin/access/update/<content_type>', methods=['POST'])
@admin_required
def admin_update_access(content_type):
    roles = request.form.getlist('roles')
    update_access_settings(content_type, roles)
    logger.info(f"Updated access roles for {content_type}: {roles}")
    return redirect(url_for('admin_access_settings'))

# ====== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ======
def start_bot():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (polling)...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    # 1) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞—à–µ–π –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î (–∫–æ–Ω—Ç–µ–Ω—Ç/—Ä–µ–∞–∫—Ü–∏–∏/–∫–æ–º–º–µ–Ω—Ç—ã/—Ä–æ–ª–∏)
    try:
        init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∫–æ–Ω—Ç–µ–Ω—Ç) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∫–æ–Ω—Ç–µ–Ω—Ç) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ init_db(): {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ init_db(): {e}")

    # 2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã telegram_users –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è /start
    ensure_tg_state_table()

    # 3) –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=start_bot, daemon=True)
    bot_thread.start()

    # 4) Flask
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)
