from flask import Flask, render_template, request, jsonify, redirect, url_for, session, send_from_directory
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import os
import threading
import json
from database import *
from werkzeug.utils import secure_filename
import uuid
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('TELEGRAM_TOKEN')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL', 'https://cinema-space-bot.onrender.com')

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
app.secret_key = 'your-secret-key-here-change-it'  # –ò–∑–º–µ–Ω–∏ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á –≤ production

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
app.config['MAX_CONTENT_LENGTH'] = 50 * 1024 * 1024  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ 50MB
app.config['UPLOAD_FOLDER'] = 'uploads'
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
ALLOWED_VIDEO_EXTENSIONS = {'mp4', 'avi', 'mov', 'wmv', 'flv', 'webm'}
ALLOWED_IMAGE_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'webp'}

def allowed_file(filename, allowed_extensions):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in allowed_extensions

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
updater = Updater(TOKEN, use_context=True)
dp = updater.dispatcher

def start(update, context):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = update.message.from_user
    telegram_id = str(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    get_or_create_user(
        telegram_id=telegram_id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    keyboard = [[
        InlineKeyboardButton(
            "üåå –ö–∏–Ω–æ–í—Å–µ–ª–µ–Ω–Ω–∞—è", 
            web_app=WebAppInfo(url=WEBHOOK_URL)
        )
    ]]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∏–Ω–æ–í—Å–µ–ª–µ–Ω–Ω–∞—è!\n"
        "‚ú® –ò—Å—Å–ª–µ–¥—É–π –∫–æ—Å–º–æ—Å –∫–∏–Ω–æ\n"
        "üé¨ –õ—É—á—à–∏–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ —Ñ–∏–ª—å–º–æ–≤\n"
        "üé• –°–≤–µ–∂–∏–µ —Ç—Ä–µ–π–ª–µ—Ä—ã\n"
        "üì∞ –ì–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        reply_markup=reply_markup
    )

def add_video_command(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ"""
    user = update.message.from_user
    telegram_id = str(user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ –∞–¥–º–∏–Ω–æ–º
    user_role = get_user_role(telegram_id)
    if user_role not in ['owner', 'admin']:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ!")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    update.message.reply_text(
        "üé¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "/add_video [—Ç–∏–ø] [–Ω–∞–∑–≤–∞–Ω–∏–µ]\n"
        "[—Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ]\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "/add_video moment –≠–ø–∏—á–Ω–∞—è —Å—Ü–µ–Ω–∞ –∏–∑ –ú–∞—Ç—Ä–∏—Ü—ã\n"
        "https://youtu.be/example_video\n\n"
        "–¢–∏–ø—ã:\n"
        "- moment (–ú–æ–º–µ–Ω—Ç—ã –∏–∑ –∫–∏–Ω–æ)\n"
        "- trailer (–¢—Ä–µ–π–ª–µ—Ä—ã)\n"
        "- news (–ù–æ–≤–æ—Å—Ç–∏)"
    )

def add_video_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ"""
    user = update.message.from_user
    telegram_id = str(user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ –∞–¥–º–∏–Ω–æ–º
    user_role = get_user_role(telegram_id)
    if user_role not in ['owner', 'admin']:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã
    if not text.startswith('/add_video '):
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_video [—Ç–∏–ø] [–Ω–∞–∑–≤–∞–Ω–∏–µ]")
        return
    
    lines = text.split('\n')
    if len(lines) < 2:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
        return
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    command_line = lines[0]
    video_url = lines[1].strip()
    
    parts = command_line.split(' ', 3)
    if len(parts) < 3:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_video [—Ç–∏–ø] [–Ω–∞–∑–≤–∞–Ω–∏–µ]")
        return
    
    content_type = parts[1]
    title = ' '.join(parts[2:])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if content_type not in ['moment', 'trailer', 'news']:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞! –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: moment, trailer, news")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –≤–∏–¥–µ–æ
    if not video_url:
        update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ!")
        return
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if content_type == 'moment':
            add_moment(title, "–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram", video_url)
            update.message.reply_text(f"‚úÖ –ú–æ–º–µ–Ω—Ç '{title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        elif content_type == 'trailer':
            add_trailer(title, "–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram", video_url)
            update.message.reply_text(f"‚úÖ –¢—Ä–µ–π–ª–µ—Ä '{title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        elif content_type == 'news':
            add_news(title, "–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram", video_url)
            update.message.reply_text(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å '{title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {str(e)}")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
dp.add_handler(CommandHandler("start", start))
dp.add_handler(CommandHandler("add_video", add_video_command))
dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'^/add_video '), add_video_handler))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), updater.bot)
    updater.dispatcher.process_update(update)
    return 'ok'

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def index():
    return render_template('index.html')

# –í–∫–ª–∞–¥–∫–∞: –ú–æ–º–µ–Ω—Ç—ã –∏–∑ –∫–∏–Ω–æ
@app.route('/moments')
def moments():
    moments_data = get_all_moments()
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    moments_with_reactions = []
    for moment in moments_data:
        reactions = get_reactions_count('moment', moment[0])
        comments_count = len(get_comments('moment', moment[0]))
        moments_with_reactions.append({
            'id': moment[0],
            'title': moment[1],
            'description': moment[2],
            'video_url': moment[3],
            'created_at': moment[4],
            'reactions': reactions,
            'comments_count': comments_count
        })
    return render_template('moments.html', moments=moments_with_reactions)

# –í–∫–ª–∞–¥–∫–∞: –¢—Ä–µ–π–ª–µ—Ä—ã
@app.route('/trailers')
def trailers():
    trailers_data = get_all_trailers()
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    trailers_with_reactions = []
    for trailer in trailers_data:
        reactions = get_reactions_count('trailer', trailer[0])
        comments_count = len(get_comments('trailer', trailer[0]))
        trailers_with_reactions.append({
            'id': trailer[0],
            'title': trailer[1],
            'description': trailer[2],
            'video_url': trailer[3],
            'created_at': trailer[4],
            'reactions': reactions,
            'comments_count': comments_count
        })
    return render_template('trailers.html', trailers=trailers_with_reactions)

# –í–∫–ª–∞–¥–∫–∞: –ù–æ–≤–æ—Å—Ç–∏
@app.route('/news')
def news():
    news_data = get_all_news()
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    news_with_reactions = []
    for news_item in news_data:
        reactions = get_reactions_count('news', news_item[0])
        comments_count = len(get_comments('news', news_item[0]))
        news_with_reactions.append({
            'id': news_item[0],
            'title': news_item[1],
            'text': news_item[2],
            'image_url': news_item[3],
            'created_at': news_item[4],
            'reactions': reactions,
            'comments_count': comments_count
        })
    return render_template('news.html', news=news_with_reactions)

# –ü–æ–∏—Å–∫
@app.route('/search')
def search():
    query = request.args.get('q', '')
    if query:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞
        return render_template('search.html', query=query, results=[])
    return render_template('search.html', query='', results=[])

# API endpoints –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@app.route('/api/add_moment', methods=['POST'])
def api_add_moment():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        video_url = ''
        if 'video_file' in request.files:
            file = request.files['video_file']
            if file and file.filename != '' and allowed_file(file.filename, ALLOWED_VIDEO_EXTENSIONS):
                filename = secure_filename(file.filename)
                unique_filename = str(uuid.uuid4()) + '_' + filename
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
                file.save(filepath)
                video_url = f"/uploads/{unique_filename}"
        else:
            data = request.get_json()
            video_url = data.get('video_url', '')
        
        data = request.form if request.form else request.get_json()
        add_moment(data['title'], data['description'], video_url)
        return jsonify({"success": True})
    except Exception as e:
        return jsonify({"success": False, "error": str(e)})

@app.route('/api/add_trailer', methods=['POST'])
def api_add_trailer():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        video_url = ''
        if 'video_file' in request.files:
            file = request.files['video_file']
            if file and file.filename != '' and allowed_file(file.filename, ALLOWED_VIDEO_EXTENSIONS):
                filename = secure_filename(file.filename)
                unique_filename = str(uuid.uuid4()) + '_' + filename
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
                file.save(filepath)
                video_url = f"/uploads/{unique_filename}"
        else:
            data = request.get_json()
            video_url = data.get('video_url', '')
        
        data = request.form if request.form else request.get_json()
        add_trailer(data['title'], data['description'], video_url)
        return jsonify({"success": True})
    except Exception as e:
        return jsonify({"success": False, "error": str(e)})

@app.route('/api/add_news', methods=['POST'])
def api_add_news():
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        title = request.form.get('title', '')
        text = request.form.get('text', '')
        image_url = ''
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if 'image_file' in request.files:
            file = request.files['image_file']
            if file and file.filename != '' and allowed_file(file.filename, ALLOWED_IMAGE_EXTENSIONS):
                filename = secure_filename(file.filename)
                unique_filename = str(uuid.uuid4()) + '_' + filename
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
                file.save(filepath)
                image_url = f"/uploads/{unique_filename}"
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if not image_url and 'image_url' in request.form:
            image_url = request.form['image_url']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_news(title, text, image_url)
        return jsonify({"success": True})
    except Exception as e:
        return jsonify({"success": False, "error": str(e)})

# Endpoint –¥–ª—è –æ—Ç–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
@app.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

# API endpoints –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
@app.route('/api/reaction', methods=['POST'])
def api_add_reaction():
    data = request.json
    success = add_reaction(
        data['item_type'], 
        data['item_id'], 
        data.get('user_id', 'anonymous'), 
        data['reaction']
    )
    return jsonify({"success": success})

@app.route('/api/comments', methods=['GET'])
def api_get_comments():
    item_type = request.args.get('type')
    item_id = request.args.get('id')
    comments = get_comments(item_type, int(item_id))
    return jsonify({"comments": comments})

@app.route('/api/comment', methods=['POST'])
def api_add_comment():
    data = request.json
    add_comment(
        data['item_type'],
        data['item_id'],
        data.get('user_name', '–ì–æ—Å—Ç—å'),
        data['text']
    )
    return jsonify({"success": True})

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@app.route('/admin/login', methods=['GET', 'POST'])
def admin_login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        if authenticate_admin(username, password):
            session['admin'] = username
            return redirect(url_for('admin_dashboard'))
        else:
            return render_template('admin/login.html', error='–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
    
    return render_template('admin/login.html')

@app.route('/admin/logout')
def admin_logout():
    session.pop('admin', None)
    return redirect(url_for('admin_login'))

@app.route('/admin')
def admin_dashboard():
    if 'admin' not in session:
        return redirect(url_for('admin_login'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = get_stats()
    
    return render_template('admin/dashboard.html',
                         moments_count=stats['moments'],
                         trailers_count=stats['trailers'],
                         news_count=stats['news'],
                         comments_count=stats['comments'])

@app.route('/admin/content')
def admin_content():
    if 'admin' not in session:
        return redirect(url_for('admin_login'))
    
    moments = get_all_moments()
    trailers = get_all_trailers()
    news = get_all_news()
    
    return render_template('admin/content.html', moments=moments, trailers=trailers, news=news)

@app.route('/admin/delete/<content_type>/<int:content_id>')
def admin_delete(content_type, content_id):
    if 'admin' not in session:
        return redirect(url_for('admin_login'))
    
    if content_type == 'moment':
        delete_moment(content_id)
    elif content_type == 'trailer':
        delete_trailer(content_id)
    elif content_type == 'news':
        delete_news(content_id)
    
    return redirect(url_for('admin_content'))

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º
@app.route('/admin/access')
def admin_access_settings():
    if 'admin' not in session:
        return redirect(url_for('admin_login'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    moment_roles = get_access_settings('moment')
    trailer_roles = get_access_settings('trailer')
    news_roles = get_access_settings('news')
    
    print(f"!!! DEBUG: moment_roles={moment_roles} !!!")
    print(f"!!! DEBUG: trailer_roles={trailer_roles} !!!")
    print(f"!!! DEBUG: news_roles={news_roles} !!!")
    
    return render_template('admin/access/settings.html',
                         moment_roles=moment_roles,
                         trailer_roles=trailer_roles,
                         news_roles=news_roles)

@app.route('/admin/access/update/<content_type>', methods=['POST'])
def admin_update_access(content_type):
    if 'admin' not in session:
        return redirect(url_for('admin_login'))
    
    print(f"!!! ADMIN_UPDATE_ACCESS called with content_type={content_type} !!!")
    roles = request.form.getlist('roles')
    print(f"!!! Received roles: {roles} !!!")
    update_access_settings(content_type, roles)
    
    return redirect(url_for('admin_access_settings'))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_bot():
    updater.start_polling()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=start_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)
