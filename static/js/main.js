// –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
document.addEventListener('DOMContentLoaded', function() {
    console.log("DOMContentLoaded —Å—Ä–∞–±–æ—Ç–∞–ª");
    
    if (window.Telegram && window.Telegram.WebApp) {
        console.log("Telegram WebApp API –¥–æ—Å—Ç—É–ø–µ–Ω");
        
        const webApp = window.Telegram.WebApp;
        
        try {
            webApp.expand();
            console.log("–í—ã–∑–æ–≤ webApp.expand() –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ webApp.expand():", error);
        }
        
        webApp.enableClosingConfirmation();
        webApp.setHeaderColor('#0f0c29');
        webApp.setBackgroundColor('#0f0c29');
        
        console.log("–í—Å–µ –º–µ—Ç–æ–¥—ã Telegram WebApp –≤—ã–∑–≤–∞–Ω—ã");
    } else {
        console.warn("Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentTab = 'moments';
let userId = 'user_' + Math.random().toString(36).substr(2, 9);

// –§–ª–∞–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
let modalClickHandlerAdded = false;
let formToggleHandlerAdded = false;

// –ü–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
document.addEventListener('DOMContentLoaded', function () {
    const contentArea = document.getElementById('content-area');
    if (!contentArea) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç content-area –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    const tabBtns = document.querySelectorAll('.tab-btn[data-tab]'); // –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –≤–∫–ª–∞–¥–æ–∫

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    async function loadTabContent(tabName) {
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            contentArea.innerHTML = `
                <div style="text-align: center; padding: 50px; color: var(--accent);">
                    <div>üåÄ –ó–∞–≥—Ä—É–∑–∫–∞ ${tabName}...</div>
                </div>
            `;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            const response = await fetch(`/${tabName}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const html = await response.text();
            contentArea.innerHTML = html;
            currentTab = tabName;
            addDynamicFeatures(); // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–∫–∏ "${tabName}":`, error);
            contentArea.innerHTML = `
                <div style="text-align: center; padding: 50px; color: var(--warning);">
                    <h2>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
                    <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç "${tabName}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
                    <small>${error.message}</small>
                </div>
            `;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫
    tabBtns.forEach(btn => {
        btn.addEventListener('click', function () {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            tabBtns.forEach(b => b.classList.remove('active'));
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–µ
            this.classList.add('active');
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            loadTabContent(this.dataset.tab);
        });
    });

    // –ü–æ–∏—Å–∫
    const searchBtn = document.getElementById('search-btn');
    const searchInput = document.getElementById('search-input');
    if (searchBtn) {
        searchBtn.addEventListener('click', async function () {
            const query = searchInput ? searchInput.value.trim() : '';
            if (query) {
                try {
                    contentArea.innerHTML = `
                        <div style="text-align: center; padding: 50px; color: var(--accent);">
                            <div>üåÄ –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"...</div>
                        </div>
                    `;

                    const response = await fetch(`/search?q=${encodeURIComponent(query)}`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const html = await response.text();
                    contentArea.innerHTML = html;
                    addDynamicFeatures();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
                    contentArea.innerHTML = `
                        <div style="text-align: center; padding: 50px; color: var(--warning);">
                            <h2>‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞</h2>
                            <p>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
                            <small>${error.message}</small>
                        </div>
                    `;
                }
            }
        });
    }

    // Enter –≤ –ø–æ–∏—Å–∫–µ
    if (searchInput) {
        searchInput.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                if (searchBtn) searchBtn.click();
            }
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
    if (tabBtns.length > 0) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É
        tabBtns[0].classList.add('active');
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
        loadTabContent(tabBtns[0].dataset.tab);
    } else {
        // –ï—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ –≤–∫–ª–∞–¥–æ–∫ –Ω–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        console.log("–ö–Ω–æ–ø–∫–∏ –≤–∫–ª–∞–¥–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.");
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function addDynamicFeatures() {
    addReactionHandlers();
    addCommentHandlers();
    addLoadCommentsHandlers();
    addModalHandlers();
    setupFormToggles();
}

function addReactionHandlers() {
    document.querySelectorAll('.reaction-btn').forEach(btn => {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        const clone = btn.cloneNode(true);
        btn.parentNode.replaceChild(clone, btn);
        
        clone.addEventListener('click', async function () {
            const itemId = this.dataset.id;
            const itemType = this.dataset.type;
            const reaction = this.dataset.reaction;

            // –ê–Ω–∏–º–∞—Ü–∏—è
            this.style.transform = 'scale(1.3)';
            this.style.boxShadow = '0 0 20px rgba(0, 243, 255, 0.8)';

            try {
                const response = await fetch('/api/reaction', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        item_type: itemType,
                        item_id: parseInt(itemId),
                        user_id: userId,
                        reaction: reaction
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                if (result.success) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                    const countSpan = this.querySelector('.reaction-count');
                    if (countSpan) {
                        const currentCount = parseInt(countSpan.textContent) || 0;
                        countSpan.textContent = currentCount + 1;
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏:', error);
            }

            setTimeout(() => {
                this.style.transform = 'scale(1)';
                this.style.boxShadow = '';
            }, 300);
        });
    });
}

function addCommentHandlers() {
    document.querySelectorAll('.comment-form').forEach(form => {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        const clone = form.cloneNode(true);
        form.parentNode.replaceChild(clone, form);
        
        clone.addEventListener('submit', async function (e) {
            e.preventDefault();
            const textarea = this.querySelector('textarea');
            const comment = textarea.value.trim();
            const itemId = this.dataset.id;
            const itemType = this.dataset.type;

            if (comment && itemId && itemType) {
                const submitBtn = this.querySelector('.submit-btn');
                const originalText = submitBtn ? submitBtn.textContent : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
                if (submitBtn) {
                    submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
                    submitBtn.disabled = true;
                }

                try {
                    const response = await fetch('/api/comment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            item_type: itemType,
                            item_id: parseInt(itemId),
                            user_name: '–ì–æ—Å—Ç—å',
                            text: comment
                        })
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();
                    if (result.success) {
                        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ DOM
                        const commentsList = this.previousElementSibling;
                        if (commentsList) {
                            const newComment = document.createElement('div');
                            newComment.className = 'comment';
                            newComment.innerHTML = `
                                <div class="comment-text">${escapeHtml(comment)}</div>
                                <div class="comment-meta">
                                    <span>–ì–æ—Å—Ç—å</span>
                                    <span>–¢–æ–ª—å–∫–æ —á—Ç–æ</span>
                                </div>
                            `;
                            // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                            if (commentsList.firstChild) {
                                commentsList.insertBefore(newComment, commentsList.firstChild);
                            } else {
                                commentsList.appendChild(newComment);
                            }
                        }

                        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                        textarea.value = '';
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
                } finally {
                    if (submitBtn) {
                        submitBtn.textContent = originalText;
                        submitBtn.disabled = false;
                    }
                }
            }
        });
    });
}

function addLoadCommentsHandlers() {
    document.querySelectorAll('.load-comments').forEach(btn => {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        const clone = btn.cloneNode(true);
        btn.parentNode.replaceChild(clone, btn);
        
        clone.addEventListener('click', async function () {
            const itemId = this.dataset.id;
            const itemType = this.dataset.type;
            const commentsList = this.nextElementSibling;

            if (!commentsList) {
                console.error('–°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            try {
                const response = await fetch(`/api/comments?type=${itemType}&id=${itemId}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const result = await response.json();

                if (result.comments && result.comments.length > 0) {
                    commentsList.innerHTML = '';
                    result.comments.forEach(comment => {
                        const commentElement = document.createElement('div');
                        commentElement.className = 'comment';
                        commentElement.innerHTML = `
                            <div class="comment-text">${escapeHtml(comment[1])}</div>
                            <div class="comment-meta">
                                <span>${escapeHtml(comment[0])}</span>
                                <span>${formatDate(comment[2])}</span>
                            </div>
                        `;
                        commentsList.appendChild(commentElement);
                    });
                    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    this.style.display = 'none';
                } else {
                    // –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                    commentsList.innerHTML = '<p>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.</p>';
                    this.style.display = 'none';
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
                commentsList.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.</p>';
            }
        });
    });
}

function addModalHandlers() {
    const modalButtons = [
        { id: 'add-moment-btn', handler: showAddMomentModal },
        { id: 'add-moment-btn-alt', handler: showAddMomentModal },
        { id: 'add-trailer-btn', handler: showAddTrailerModal },
        { id: 'add-trailer-btn-alt', handler: showAddTrailerModal },
        { id: 'add-news-btn', handler: showAddNewsModal },
        { id: 'add-news-btn-alt', handler: showAddNewsModal }
    ];

    modalButtons.forEach(({ id, handler }) => {
        const element = document.getElementById(id);
        if (element) {
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            const clone = element.cloneNode(true);
            element.parentNode.replaceChild(clone, element);
            clone.addEventListener('click', handler);
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    if (!modalClickHandlerAdded) {
        document.addEventListener('click', function (e) {
            if (e.target.classList.contains('modal')) {
                e.target.style.display = 'none';
            }
        });
        modalClickHandlerAdded = true;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
function addNewItem(type) {
    alert(`–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${type} –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ!`);
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ ---
function showAddMomentModal() {
    const modal = document.getElementById('add-moment-modal');
    if (modal) {
        modal.style.display = 'flex';
    } else {
        console.warn('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–æ–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
}

function showAddTrailerModal() {
    const modal = document.getElementById('add-trailer-modal');
    if (modal) {
        modal.style.display = 'flex';
    } else {
        console.warn('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç—Ä–µ–π–ª–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
}

function showAddNewsModal() {
    const modal = document.getElementById('add-news-modal');
    if (modal) {
        modal.style.display = 'flex';
    } else {
        console.warn('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
    }
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ—Ä–º ---
function setupFormToggles() {
    if (!formToggleHandlerAdded) {
        document.addEventListener('change', function (e) {
            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–æ–π –∏ URL –¥–ª—è –º–æ–º–µ–Ω—Ç–æ–≤
            if (e.target.name === 'video_type' && e.target.closest('#add-moment-modal')) {
                const fileSection = document.getElementById('moment-file-section');
                const urlSection = document.getElementById('moment-url-section');
                if (fileSection && urlSection) {
                    if (e.target.value === 'upload') {
                        fileSection.style.display = 'block';
                        urlSection.style.display = 'none';
                    } else {
                        fileSection.style.display = 'none';
                        urlSection.style.display = 'block';
                    }
                }
            }

            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–æ–π –∏ URL –¥–ª—è —Ç—Ä–µ–π–ª–µ—Ä–æ–≤
            if (e.target.name === 'video_type' && e.target.closest('#add-trailer-modal')) {
                const fileSection = document.getElementById('trailer-file-section');
                const urlSection = document.getElementById('trailer-url-section');
                if (fileSection && urlSection) {
                    if (e.target.value === 'upload') {
                        fileSection.style.display = 'block';
                        urlSection.style.display = 'none';
                    } else {
                        fileSection.style.display = 'none';
                        urlSection.style.display = 'block';
                    }
                }
            }

            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–æ–π –∏ URL –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
            if (e.target.name === 'image_type' && e.target.closest('#add-news-modal')) {
                const fileSection = document.getElementById('news-file-section');
                const urlSection = document.getElementById('news-url-section');
                if (fileSection && urlSection) {
                    if (e.target.value === 'upload') {
                        fileSection.style.display = 'block';
                        urlSection.style.display = 'none';
                    } else {
                        fileSection.style.display = 'none';
                        urlSection.style.display = 'block';
                    }
                }
            }
        });
        formToggleHandlerAdded = true;
    }
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
// –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function () {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–º–µ–Ω—Ç–∞
    const momentForm = document.getElementById('add-moment-form');
    if (momentForm) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        const clone = momentForm.cloneNode(true);
        momentForm.parentNode.replaceChild(clone, momentForm);
        
        clone.addEventListener('submit', async function (e) {
            e.preventDefault();

            const formData = new FormData(this);
            const videoType = this.querySelector('input[name="video_type"]:checked')?.value || 'url';

            try {
                let response;
                if (videoType === 'upload' && this.querySelector('input[name="video_file"]')?.files[0]) {
                    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
                    response = await fetch('/api/add_moment', {
                        method: 'POST',
                        body: formData
                    });
                } else {
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ URL –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
                    const jsonData = {
                        title: formData.get('title'),
                        description: formData.get('description'),
                        video_url: formData.get('video_url') || ''
                    };
                    response = await fetch('/api/add_moment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(jsonData)
                    });
                }

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                if (result.success) {
                    closeModal('add-moment-modal');
                    location.reload();
                } else {
                    alert('–û—à–∏–±–∫–∞: ' + (result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–æ–º–µ–Ω—Ç'));
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
                alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message);
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–ª–µ—Ä–∞
    const trailerForm = document.getElementById('add-trailer-form');
    if (trailerForm) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        const clone = trailerForm.cloneNode(true);
        trailerForm.parentNode.replaceChild(clone, trailerForm);
        
        clone.addEventListener('submit', async function (e) {
            e.preventDefault();

            const formData = new FormData(this);
            const videoType = this.querySelector('input[name="video_type"]:checked')?.value || 'url';

            try {
                let response;
                if (videoType === 'upload' && this.querySelector('input[name="video_file"]')?.files[0]) {
                    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
                    response = await fetch('/api/add_trailer', {
                        method: 'POST',
                        body: formData
                    });
                } else {
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ URL –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
                    const jsonData = {
                        title: formData.get('title'),
                        description: formData.get('description'),
                        video_url: formData.get('video_url') || ''
                    };
                    response = await fetch('/api/add_trailer', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(jsonData)
                    });
                }

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                if (result.success) {
                    closeModal('add-trailer-modal');
                    location.reload();
                } else {
                    alert('–û—à–∏–±–∫–∞: ' + (result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–π–ª–µ—Ä'));
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
                alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message);
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
    const newsForm = document.getElementById('add-news-form');
    if (newsForm) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        const clone = newsForm.cloneNode(true);
        newsForm.parentNode.replaceChild(clone, newsForm);
        
        clone.addEventListener('submit', async function (e) {
            e.preventDefault();

            // –î–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º FormData, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–∞–π–ª
            const formData = new FormData(this);
            // image_type –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —É–¥–∞–ª–∏–º –µ–≥–æ –∏–∑ FormData
            formData.delete('image_type');

            try {
                const response = await fetch('/api/add_news', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                if (result.success) {
                    closeModal('add-news-modal');
                    location.reload();
                } else {
                    alert('–û—à–∏–±–∫–∞: ' + (result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å'));
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
                alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message);
            }
        });
    }
});

console.log("main.js –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!");
