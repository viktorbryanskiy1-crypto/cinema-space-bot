// main.js ‚Äî –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Ñ–∞–π–ª —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π Telegram WebApp –∏ fullscreen
// –û–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ UX

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentTab = 'moments';
let userId = 'user_' + Math.random().toString(36).substr(2, 9);

// –§–ª–∞–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
let modalClickHandlerAdded = false;
let formToggleHandlerAdded = false;

// --- –ù–û–í–û–ï: –ö—ç—à –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ ---
let tabCache = {};

// === –£–õ–¨–¢–†–ê–°–û–í–†–ï–ú–ï–ù–ù–´–ô –ö–û–°–ú–ò–ß–ï–°–ö–ò–ô PRELOADER LOGIC ===
document.addEventListener('DOMContentLoaded', async function() {
    console.log("DOMContentLoaded —Å—Ä–∞–±–æ—Ç–∞–ª");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp (–∫–∞–∫ –±—ã–ª–æ)
    if (window.Telegram && window.Telegram.WebApp) {
        const webApp = window.Telegram.WebApp;
        try {
            webApp.ready();
            if (webApp.requestFullscreen) {
                webApp.requestFullscreen();
            } else {
                webApp.expand();
            }
            webApp.enableClosingConfirmation();
            webApp.setHeaderColor('#0f0c29');
            webApp.setBackgroundColor('#0f0c29');
            webApp.MainButton.hide();
            console.log("Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–æ –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:", error);
        }
    } else {
        console.warn("Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }

    // === –õ–û–ì–ò–ö–ê –ö–û–°–ú–ò–ß–ï–°–ö–û–ì–û PRELOADER'–ê ===
    const preloader = document.getElementById('cosmic-preloader');
    const progressBar = document.getElementById('cosmic-progress-bar');
    const statusText = document.getElementById('cosmic-status');
    const content = document.getElementById('app-content');

    if (!preloader) {
        // –ï—Å–ª–∏ preloader –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        if (content) {
            content.style.display = 'block';
            initializeApp();
        }
        return;
    }

    function updatePreloaderProgress(percent, status) {
        if (progressBar) {
            progressBar.style.width = `${percent}%`;
        }
        if (statusText) {
            statusText.textContent = `${percent}% ${status}`;
        }
        console.log(`–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${percent}% - ${status}`);
    }

    try {
        // 0% - –ù–∞—á–∞–ª–æ
        updatePreloaderProgress(0, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–¥—Ä–∞...");

        // 10% - –ü—Ä–æ–≤–µ—Ä–∫–∞ API
        updatePreloaderProgress(10, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö —Å–≤—è–∑–µ–π...");
        await new Promise(resolve => setTimeout(resolve, 300));

        // 20% - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        try {
            const healthResponse = await fetch('/health');
            if (healthResponse.ok) {
                const healthData = await healthResponse.json();
                console.log("API –≥–æ—Ç–æ–≤:", healthData);
                updatePreloaderProgress(30, "–ö–≤–∞–Ω—Ç–æ–≤—ã–µ —Å–≤—è–∑–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
            } else {
                updatePreloaderProgress(30, "–ö–≤–∞–Ω—Ç–æ–≤—ã–µ —Å–≤—è–∑–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...");
            }
        } catch (err) {
            console.warn("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:", err);
            updatePreloaderProgress(30, "–ö–≤–∞–Ω—Ç–æ–≤—ã–µ —Å–≤—è–∑–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã");
        }

        // 40% - –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª–∞–¥–æ–∫
        updatePreloaderProgress(40, "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∞–ª–∞–∫—Ç–∏–∫...");
        const tabs = ['moments', 'trailers', 'news'];
        let loadedTabs = 0;

        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª–∞–¥–æ–∫
        const tabPromises = tabs.map(async (tab) => {
            try {
                const response = await fetch(`/${tab}`);
                if (response.ok) {
                    const html = await response.text();
                    tabCache[tab] = html;
                    console.log(`–í–∫–ª–∞–¥–∫–∞ ${tab} –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
                }
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–∫–∏ ${tab}:`, error);
            }
            loadedTabs++;
            const progress = 40 + Math.floor((loadedTabs / tabs.length) * 50);
            updatePreloaderProgress(progress, `–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${loadedTabs}/${tabs.length} –≥–∞–ª–∞–∫—Ç–∏–∫`);
        });

        await Promise.all(tabPromises);

        // 90% - –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        updatePreloaderProgress(90, "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π...");
        await new Promise(resolve => setTimeout(resolve, 500));

        // 100% - –ì–æ—Ç–æ–≤–æ
        updatePreloaderProgress(100, "–ì–æ—Ç–æ–≤–æ! –í—Ö–æ–¥ –≤ –ö–∏–Ω–æ–í—Å–µ–ª–µ–Ω–Ω—É—é...");

        // –ü–ª–∞–≤–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ preloader'–∞
        setTimeout(() => {
            preloader.classList.add('fade-out');
            setTimeout(() => {
                preloader.style.display = 'none';
                if (content) {
                    content.style.display = 'block';
                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                    initializeApp();
                }
            }, 800);
        }, 700);

    } catch (error) {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        preloader.classList.add('fade-out');
        setTimeout(() => {
            preloader.style.display = 'none';
            if (content) {
                content.style.display = 'block';
                initializeApp();
            }
        }, 800);
    }
});

// === ORIGINAL MAIN LOGIC (–æ—Å—Ç–∞—ë—Ç—Å—è –ø–æ—Å–ª–µ preloader) ===
function initializeApp() {
    console.log("–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ");

    // --- –í–∫–ª–∞–¥–∫–∏ ---
    const contentArea = document.getElementById('content-area');
    if (!contentArea) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç content-area –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    const tabBtns = document.querySelectorAll('.tab-btn[data-tab]');

    // --- –ù–û–í–û–ï: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∫–ª–∞–¥–∫–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º ---
    async function loadTabContent(tabName) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º
            if (tabCache[tabName]) {
                console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª–∞–¥–∫–∏ ${tabName} –∏–∑ –∫—ç—à–∞`);
                contentArea.innerHTML = tabCache[tabName];
                currentTab = tabName;
                addDynamicFeatures();
                return;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∞
            contentArea.innerHTML = `
                <div style="text-align: center; padding: 50px; color: var(--accent);">
                    <div class="ultra-modern-spinner" style="margin: 0 auto 20px;"></div>
                    <div>üåÄ –ó–∞–≥—Ä—É–∑–∫–∞ ${tabName}...</div>
                </div>
            `;

            const response = await fetch(`/${tabName}`);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const html = await response.text();
            
            // –ö—ç—à–∏—Ä—É–µ–º HTML –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫
            tabCache[tabName] = html;
            
            contentArea.innerHTML = html;
            currentTab = tabName;
            addDynamicFeatures();
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–∫–∏ "${tabName}":`, error);
            contentArea.innerHTML = `
                <div style="text-align: center; padding: 50px; color: var(--warning);">
                    <h2>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
                    <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç "${tabName}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
                    <small>${error.message}</small>
                </div>
            `;
        }
    }

    tabBtns.forEach(btn => {
        btn.addEventListener('click', function () {
            tabBtns.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            loadTabContent(this.dataset.tab);
        });
    });

    // --- –ü–æ–∏—Å–∫ ---
    const searchBtn = document.getElementById('search-btn');
    const searchInput = document.getElementById('search-input');

    if (searchBtn) {
        searchBtn.addEventListener('click', async function () {
            const query = searchInput ? searchInput.value.trim() : '';
            if (query) {
                try {
                    contentArea.innerHTML = `
                        <div style="text-align: center; padding: 50px; color: var(--accent);">
                            <div class="ultra-modern-spinner" style="margin: 0 auto 20px;"></div>
                            <div>üåÄ –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"...</div>
                        </div>
                    `;
                    const response = await fetch(`/search?q=${encodeURIComponent(query)}`);
                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                    const html = await response.text();
                    contentArea.innerHTML = html;
                    addDynamicFeatures();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
                    contentArea.innerHTML = `
                        <div style="text-align: center; padding: 50px; color: var(--warning);">
                            <h2>‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞</h2>
                            <p>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
                            <small>${error.message}</small>
                        </div>
                    `;
                }
            }
        });
    }

    if (searchInput) {
        searchInput.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                if (searchBtn) searchBtn.click();
            }
        });
    }

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–∫–∏ ---
    if (tabBtns.length > 0) {
        tabBtns[0].classList.add('active');
        loadTabContent(tabBtns[0].dataset.tab);
    } else {
        console.log("–ö–Ω–æ–ø–∫–∏ –≤–∫–ª–∞–¥–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.");
    }

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
    setupFormSubmissions();
    
    // --- –ù–û–í–û–ï: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫ ---
    setTimeout(() => {
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ –≤ —Ñ–æ–Ω–µ
        const otherTabs = ['trailers', 'news'];
        otherTabs.forEach(tabName => {
            fetch(`/${tabName}`)
                .then(response => response.text())
                .then(html => {
                    tabCache[tabName] = html;
                    console.log(`–í–∫–ª–∞–¥–∫–∞ ${tabName} –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞`);
                })
                .catch(error => console.log(`–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ ${tabName}:`, error));
        });
    }, 2000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ç—å

    // === –í–ö–õ–Æ–ß–ï–ù–ò–ï –°–ö–†–û–õ–õ–ê –ü–û–°–õ–ï –ó–ê–ì–†–£–ó–ö–ò ===
    const appContent = document.getElementById('app-content');
    if (appContent) {
        // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        appContent.style.height = '100vh';
        appContent.style.overflowY = 'auto';
        appContent.style.webkitOverflowScrolling = 'touch';
        appContent.style.overscrollBehavior = 'contain';
        
        // –£–±–∏—Ä–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —É body/html –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        // –ù–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è overscroll
    }

    console.log("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, —Å–∫—Ä–æ–ª–ª —Ä–∞–∑—Ä–µ—à–µ–Ω");
}

// --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
function addDynamicFeatures() {
    addReactionHandlers();
    addCommentHandlers();
    addLoadCommentsHandlers();
    addModalHandlers();
    setupFormToggles();
    initializeVideoErrorHandling();
}

// --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ ---
function initializeVideoErrorHandling() {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤
    document.querySelectorAll('video').forEach(video => {
        video.addEventListener('error', async function(e) {
            console.log('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ:', e);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
            const parent = this.parentNode;
            
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞
            const loader = document.createElement('div');
            loader.className = 'video-loader';
            loader.innerHTML = `
                <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 300px; background: rgba(15, 12, 41, 0.8); border-radius: 10px; margin: 10px 0;">
                    <div class="ultra-modern-spinner"></div>
                    <div style="margin-top: 15px; color: #00f3ff;">üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ...</div>
                </div>
            `;
            
            // –ó–∞–º–µ–Ω—è–µ–º –≤–∏–¥–µ–æ –Ω–∞ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä
            parent.replaceChild(loader, this);
            
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ
                const videoSrc = this.querySelector('source')?.src || this.src;
                if (videoSrc && videoSrc.includes('api.telegram.org/file')) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
                    const response = await fetch('/api/refresh_video_url', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            post_url: videoSrc
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success && result.new_url) {
                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ—ç–ª–µ–º–µ–Ω—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
                        const newVideo = document.createElement('video');
                        newVideo.controls = true;
                        newVideo.preload = 'metadata';
                        newVideo.style.cssText = 'max-width: 100%; border-radius: 10px; width: 100%; height: auto;';
                        
                        const source = document.createElement('source');
                        source.src = result.new_url;
                        source.type = 'video/mp4';
                        
                        newVideo.appendChild(source);
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
                        newVideo.addEventListener('error', function(e) {
                            console.log('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ:', e);
                            const errorNotice = document.createElement('div');
                            errorNotice.className = 'video-error-notice';
                            errorNotice.innerHTML = `
                                <div style="background: rgba(255, 0, 0, 0.2); padding: 15px; border-radius: 8px; margin: 10px 0; color: #ff4444; text-align: center;">
                                    <div style="font-size: 24px; margin-bottom: 10px;">‚ùå</div>
                                    <div>–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤–∏–¥–µ–æ</div>
                                    <div style="font-size: 12px; margin-top: 5px;">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ</div>
                                </div>
                            `;
                            parent.replaceChild(errorNotice, newVideo);
                        });
                        
                        // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä –Ω–∞ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
                        parent.replaceChild(newVideo, loader);
                        
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –≤–∏–¥–µ–æ
                        newVideo.load();
                        
                        console.log('–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
                    } else {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                        const errorNotice = document.createElement('div');
                        errorNotice.className = 'video-error-notice';
                        errorNotice.innerHTML = `
                            <div style="background: rgba(255, 0, 0, 0.2); padding: 15px; border-radius: 8px; margin: 10px 0; color: #ff4444; text-align: center;">
                                <div style="font-size: 24px; margin-bottom: 10px;">‚ùå</div>
                                <div>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥–µ–æ</div>
                                <div style="font-size: 12px; margin-top: 5px;">${result.error || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'}</div>
                            </div>
                        `;
                        parent.replaceChild(errorNotice, loader);
                    }
                } else {
                    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ Telegram —Å—Å—ã–ª–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É
                    const errorNotice = document.createElement('div');
                    errorNotice.className = 'video-error-notice';
                    errorNotice.innerHTML = `
                        <div style="background: rgba(255, 0, 0, 0.2); padding: 15px; border-radius: 8px; margin: 10px 0; color: #ff4444; text-align: center;">
                            <div style="font-size: 24px; margin-bottom: 10px;">‚ùå</div>
                            <div>–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ</div>
                            <div style="font-size: 12px; margin-top: 5px;">–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</div>
                        </div>
                    `;
                    parent.replaceChild(errorNotice, loader);
                }
            } catch (refreshError) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ:', refreshError);
                const errorNotice = document.createElement('div');
                errorNotice.className = 'video-error-notice';
                errorNotice.innerHTML = `
                    <div style="background: rgba(255, 0, 0, 0.2); padding: 15px; border-radius: 8px; margin: 10px 0; color: #ff4444; text-align: center;">
                        <div style="font-size: 24px; margin-bottom: 10px;">üåê</div>
                        <div>–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏</div>
                        <div style="font-size: 12px; margin-top: 5px;">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</div>
                    </div>
                `;
                parent.replaceChild(errorNotice, loader);
            }
        });
    });
}

// --- –†–µ–∞–∫—Ü–∏–∏ ---
function addReactionHandlers() {
    document.querySelectorAll('.reaction-btn').forEach(btn => {
        const clone = btn.cloneNode(true);
        btn.parentNode.replaceChild(clone, btn);

        clone.addEventListener('click', async function () {
            const itemId = this.dataset.id;
            const itemType = this.dataset.type;
            const reaction = this.dataset.reaction;

            this.style.transform = 'scale(1.3)';
            this.style.boxShadow = '0 0 20px rgba(0, 243, 255, 0.8)';

            try {
                const response = await fetch('/api/reaction', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({
                        item_type: itemType,
                        item_id: parseInt(itemId),
                        user_id: userId,
                        reaction: reaction
                    })
                });

                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                const result = await response.json();
                if (result.success) {
                    const countSpan = this.querySelector('.reaction-count');
                    if (countSpan) {
                        const currentCount = parseInt(countSpan.textContent) || 0;
                        countSpan.textContent = currentCount + 1;
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏:', error);
            }

            setTimeout(() => {
                this.style.transform = 'scale(1)';
                this.style.boxShadow = '';
            }, 300);
        });
    });
}

// --- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ---
function addCommentHandlers() {
    document.querySelectorAll('.comment-form').forEach(form => {
        const clone = form.cloneNode(true);
        form.parentNode.replaceChild(clone, form);

        clone.addEventListener('submit', async function (e) {
            e.preventDefault();
            const textarea = this.querySelector('textarea');
            const comment = textarea.value.trim();
            const itemId = this.dataset.id;
            const itemType = this.dataset.type;

            if (comment && itemId && itemType) {
                const submitBtn = this.querySelector('.submit-btn');
                const originalText = submitBtn ? submitBtn.textContent : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
                if (submitBtn) {
                    submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
                    submitBtn.disabled = true;
                }

                try {
                    const response = await fetch('/api/comment', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({
                            item_type: itemType,
                            item_id: parseInt(itemId),
                            user_name: '–ì–æ—Å—Ç—å',
                            text: comment
                        })
                    });

                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                    const result = await response.json();
                    if (result.success) {
                        const commentsList = this.previousElementSibling;
                        if (commentsList) {
                            const newComment = document.createElement('div');
                            newComment.className = 'comment';
                            newComment.innerHTML = `
                                <div class="comment-text">${escapeHtml(comment)}</div>
                                <div class="comment-meta">
                                    <span>–ì–æ—Å—Ç—å</span>
                                    <span>–¢–æ–ª—å–∫–æ —á—Ç–æ</span>
                                </div>
                            `;
                            commentsList.firstChild
                                ? commentsList.insertBefore(newComment, commentsList.firstChild)
                                : commentsList.appendChild(newComment);
                        }
                        textarea.value = '';
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
                } finally {
                    if (submitBtn) {
                        submitBtn.textContent = originalText;
                        submitBtn.disabled = false;
                    }
                }
            }
        });
    });
}

// --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ---
function addLoadCommentsHandlers() {
    document.querySelectorAll('.load-comments').forEach(btn => {
        const clone = btn.cloneNode(true);
        btn.parentNode.replaceChild(clone, btn);

        clone.addEventListener('click', async function () {
            const itemId = this.dataset.id;
            const itemType = this.dataset.type;
            const commentsList = this.nextElementSibling;

            if (!commentsList) return console.error('–°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');

            try {
                const response = await fetch(`/api/comments?type=${itemType}&id=${itemId}`);
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                const result = await response.json();

                if (result.comments && result.comments.length > 0) {
                    commentsList.innerHTML = '';
                    result.comments.forEach(comment => {
                        const commentElement = document.createElement('div');
                        commentElement.className = 'comment';
                        commentElement.innerHTML = `
                            <div class="comment-text">${escapeHtml(comment[1])}</div>
                            <div class="comment-meta">
                                <span>${escapeHtml(comment[0])}</span>
                                <span>${formatDate(comment[2])}</span>
                            </div>
                        `;
                        commentsList.appendChild(commentElement);
                    });
                    this.style.display = 'none';
                } else {
                    commentsList.innerHTML = '<p>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.</p>';
                    this.style.display = 'none';
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
                commentsList.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.</p>';
            }
        });
    });
}

// --- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ ---
// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–æ–∫
function showAddMomentModal() {
    showModal('add-moment-modal');
}
function showAddTrailerModal() {
    showModal('add-trailer-modal');
}
function showAddNewsModal() {
    showModal('add-news-modal');
}
function showModal(id) {
    const modal = document.getElementById(id);
    if (modal) modal.style.display = 'flex';
}
function closeModal(id) {
    const modal = document.getElementById(id);
    if (modal) modal.style.display = 'none';
}

function addModalHandlers() {
    // –£–±–∏—Ä–∞–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
    if (!modalClickHandlerAdded) {
        const modalButtons = [
            { id: 'add-moment-btn', handler: showAddMomentModal },
            { id: 'add-moment-btn-alt', handler: showAddMomentModal },
            { id: 'add-trailer-btn', handler: showAddTrailerModal },
            { id: 'add-trailer-btn-alt', handler: showAddTrailerModal },
            { id: 'add-news-btn', handler: showAddNewsModal },
            { id: 'add-news-btn-alt', handler: showAddNewsModal }
        ];

        modalButtons.forEach(({ id, handler }) => {
            const element = document.getElementById(id);
            if (element) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                if (!element.dataset.handlerAdded) {
                    element.addEventListener('click', handler);
                    element.dataset.handlerAdded = 'true'; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                }
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–∫–Ω–∞
        document.addEventListener('click', function (e) {
            if (e.target.classList && e.target.classList.contains('modal')) {
                e.target.style.display = 'none';
            }
        });
        modalClickHandlerAdded = true;
    }
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ---
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' });
}

// --- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ—Ä–º ---
function setupFormToggles() {
    if (!formToggleHandlerAdded) {
        document.addEventListener('change', function (e) {
            const target = e.target;

            const toggleSections = [
                { modalId: 'add-moment-modal', typeName: 'video_type', fileId: 'moment-file-section', urlId: 'moment-url-section' },
                { modalId: 'add-trailer-modal', typeName: 'video_type', fileId: 'trailer-file-section', urlId: 'trailer-url-section' },
                { modalId: 'add-news-modal', typeName: 'image_type', fileId: 'news-file-section', urlId: 'news-url-section' }
            ];

            toggleSections.forEach(({ modalId, typeName, fileId, urlId }) => {
                if (target.name === typeName && target.closest(`#${modalId}`)) {
                    const fileSection = document.getElementById(fileId);
                    const urlSection = document.getElementById(urlId);
                    if (fileSection && urlSection) {
                        if (target.value === 'upload') {
                            fileSection.style.display = 'block';
                            urlSection.style.display = 'none';
                        } else {
                            fileSection.style.display = 'none';
                            urlSection.style.display = 'block';
                        }
                    }
                }
            });
        });
        formToggleHandlerAdded = true;
    }
}

// --- –§–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
function setupFormSubmissions() {
    // –ú–æ–º–µ–Ω—Ç—ã
    setupContentForm('add-moment-form', 'video_type', '/api/add_moment', 'add-moment-modal');
    // –¢—Ä–µ–π–ª–µ—Ä—ã
    setupContentForm('add-trailer-form', 'video_type', '/api/add_trailer', 'add-trailer-modal');
    // –ù–æ–≤–æ—Å—Ç–∏
    setupContentForm('add-news-form', 'image_type', '/api/add_news', 'add-news-modal', true);
}

function setupContentForm(formId, typeName, apiUrl, modalId, alwaysFormData=false) {
    const form = document.getElementById(formId);
    if (!form) return;

    const clone = form.cloneNode(true);
    form.parentNode.replaceChild(clone, form);

    clone.addEventListener('submit', async function (e) {
        e.preventDefault();
        const formData = new FormData(this);
        if (alwaysFormData) formData.delete(typeName);

        const typeValue = this.querySelector(`input[name="${typeName}"]:checked`)?.value || 'url';
        try {
            let response;
            if (!alwaysFormData && typeValue === 'upload' && this.querySelector(`input[name="${typeName}_file"]`)?.files[0]) {
                response = await fetch(apiUrl, { method: 'POST', body: formData });
            } else {
                const jsonData = {};
                formData.forEach((v, k) => jsonData[k] = v);
                response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(jsonData) });
            }

            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const result = await response.json();
            if (result.success) {
                closeModal(modalId);
                location.reload();
            } else {
                alert('–û—à–∏–±–∫–∞: ' + (result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç'));
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message);
        }
    });
}

console.log("main.js –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å fullscreen Telegram WebApp!");
